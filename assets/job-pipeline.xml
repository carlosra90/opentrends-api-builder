<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.8.4"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.8.4">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.92">
    <script>import jenkins.model.Jenkins
import hudson.model.*
pipeline {

    agent any
	stages { 
	 
	 	    stage(&apos;SCM Gitlab checkout&apos;){
					steps{
					    script{
					        sh &apos;&apos;&apos;
					        echo &quot;
					        checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/&apos;+env.branch ]], browser: [$class: &apos;GitLab&apos;, repoUrl: &apos;&apos;], extensions: [[$class: &apos;RelativeTargetDirectory&apos;, relativeTargetDir: env.parentdir], [$class: &apos;SubmoduleOption&apos;, disableSubmodules: false, parentCredentials: true, recursiveSubmodules: true, reference: &apos;&apos;, threads: 2, trackingSubmodules: false]], userRemoteConfigs: [[credentialsId: &apos;ldap_git_scm&apos;, name: &apos;origin&apos;, refspec: &apos;+refs/heads/&apos;+env.branch+&apos;:refs/remotes/origin/&apos;+env.branch, url: env.giturl]]])
					        &quot;
					        &apos;&apos;&apos;
					    }
					}
	 	    }
	 	    
	 	    stage(&apos;Grants success compile project&apos;){

				steps{   
					      script{
					          sh &apos;&apos;&apos;
					             echo &quot;
                                 configFileProvider([configFile(fileId: env.mvnxmlsettingsid, targetLocation: env.parentdir+&apos;/settings.xml&apos;, variable: &apos;mvn_repository&apos;)]) {
                            
                                   cd ${parentdir}
						         	mvn  clean package  -s settings.xml -Dmaven.test.skip=true -Dmaven.test.failure.ignore=true {MAVEN_EXTRA_OPT} 
                                 }
                                 &quot;
                                 &apos;&apos;&apos;
					        }
                }	
			}			
		
            stage(&apos;Initializating static code analysis with SonarQube&apos;) {
		    
			
			steps {

                script{
					          sh &apos;&apos;&apos;
					             echo &quot;
                                 
                                    withSonarQubeEnv(&apos;SonarQubeEnv&apos;){
                                                   
                                                    cd ${parentdir}
                                                    mvn clean package -s ../settings.xml org.sonarsource.scanner.maven:sonar-maven-plugin:3.2:sonar -Dmaven.test.skip=true -Dsonar.projectKey=${POM_GROUPID}:${POM_ARTIFACTID} -Dsonar.projectVersion=${POM_VERSION}  -Dsonar.login=${sonartoken}  -Dsonar.host.url=http://sonar.localhost.com
                                                    
                                            }
                                            
                                                timeout(time: 15, unit: &apos;SECONDS&apos;) {
                                                waitForQualityGate(credentialsId: env.sonartoken, abortPipeline: true )
                                                
                                                }
				                     &quot;
                                 &apos;&apos;&apos;
                }
            
            
            
            }
			post{
						success {
							echo &apos;Finished successfully SATS Analysis&apos;
						}
						failure{
							echo &apos;An error has occurred SATS Analysis&apos;
						}
					}
		
		}
        
        
        		stage(&apos;Pushing artifact to nexuss repository&apos;){

					steps{
					   script{
					       try {
							sh &apos;&apos;&apos;
                            echo &quot;
							cd ${parentdir}
							mvn clean package  -P${profile} -s settings.xml ${MAVEN_EXTRA_OPT} 
							mvn -pl  ${moduledir}   deploy:deploy-file -DgroupId=${POM_GROUPID} -DartifactId=${POM_ARTIFACTID} -Dversion=${POM_VERSION} -DgeneratePom=false -Dpackaging=${mvnpackaging} -DrepositoryId=nexus -Durl=&quot;${nexusurl}&quot; -Dfile=./target/${POM_ARTIFACTID}-${POM_VERSION}.${mvnpackaging} -s settings.xml
							&quot;
                            &apos;&apos;&apos;
					       }catch (e) {
                        echo &apos;Err:&apos; + e.toString()
					       }
                        
                    }
						
					}
		}




        		stage(&apos;Preparing artifact for docker image&apos;){
					steps{   
                        script{ 
                            sh &apos;&apos;&apos;
                            echo &quot;
                            cd ${parentdir}
							mvn clean package  -P${profile} fabric8:resource -s settings.xml -Dmaven.test.skip=true -Dmaven.test.failure.ignore=true ${MAVEN_EXTRA_OPT}
                            &quot;
                            &apos;&apos;&apos;
                        }	
				   }			
		}


		stage(&apos;Building &amp; pushing docker image&apos;){
					steps{  
                        script{ 
                            sh &apos;&apos;&apos;    
                            echo &quot;
                            configFileProvider([configFile(fileId: env.ansibleymldockerpushid, targetLocation: env.parentdir+&apos;/docker_push_registry.yaml&apos;, variable: &apos;docker_registry_yml&apos;), configFile(fileId: env.ansiblecfgid, targetLocation: env.parentdir+&apos;/ansible.cfg&apos;, variable: &apos;ansible_cfg&apos;), configFile(fileId: env.ansiblehostid, targetLocation: env.parentdir+&apos;/hosts&apos;, variable: &apos;hosts_cfg&apos;), configFile(fileId: env.ansibledockerfileid, targetLocation: env.parentdir+&apos;/Dockerfile&apos;, variable: &apos;dockerfile&apos;)  ]) {
								
								withCredentials([usernamePassword(credentialsId: env.nexusldapregistryid , passwordVariable: &apos;registry_psswd&apos;, usernameVariable: &apos;registry_user&apos;)]) {
								
								     cd ${parentdir}
								     ansible-playbook docker_push_registry.yaml -i hosts -u ${ansibleuser}  -e &quot;abl_build=${BUILD_NUMBER} abl_registry=${dockerregistryurl} abl_module_dir=${moduledir} abl_abosultepath_dir=${WORKSPACE}/${parentdir} abl_artifact_id=${POM_ARTIFACTID} abl_artifact_version=${POM_VERSION} abl_artifact_package=${mvnpackaging} abl_namespace=${target_namespace} abl_registry_user=${registry_user} abl_registry_pwd=${registry_psswd}&quot;
								
								}
								
                        }	
                        &quot;
                        &apos;&apos;&apos;
                    }
				   }
				   
		}


		stage(&apos;Initializating cloud environment&apos;){

			steps {
                script{
                    sh &apos;echo &quot;if the flag init env is set true, then i proceed to initializate kubernetes namespaces, roles, secrets, sa,... related to the container job&quot;&apos;
                
            }
			}
		}

        stage(&apos;Deploying Components&apos;){
			steps{   

                script {
                    sh &apos; echo &quot; deploy all artifacts previously created&quot;&apos;
                }
            }
                }

		stage(&apos;Cleaning up data directory&apos;){
			steps{   
				script{
                    sh &apos;&apos;&apos;
                    echo &quot;
                    rm -rf ${parentdir}*
                    &quot;
                    &apos;&apos;&apos;
				}
			}
		}	
        
        
        
     		stage(&apos;Sending Env Deploy Notification&apos;){
			steps{   
				script{
                    sh &apos;&apos;&apos;
                    echo &quot;
                    Build succesfu or fail delivery
                    &quot;
                    &apos;&apos;&apos;
				}
			}
		}	   
        
        
        
        
        }
	    
	}
</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
